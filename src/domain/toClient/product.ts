import { Product } from '@src/infra/database/entities';
import { ProductClient } from '../dtos/product';

type ToClient = (product: Product) => ProductClient;

export const productToClient: ToClient = product => ({
  cdProduto: product.id,
  cdgrupo: product.groupId,
  cdSubGrupo: product.subGroupId,
  cdPessoa: product.personId,
  cdPessoa_1: product.personOneId,
  cdClassificacaoFiscal: product.taxClassificationId,
  codPedidoOnline: product.onlineOrderId,
  cdFabricante: product.manufacturerCode,
  cdCodigoDIC: product.dicCode,
  cdGEAP: product.geapCode,
  cdUnimed: product.unimedCode,
  cdSaoLucas: product.saoLucasCode,
  cdSUS: product.susCode,
  cdSIMPRO: product.simproCode,
  dsCaminho: product.pathCode,
  cdIPI: product.ipiCode,
  cdOperador: product.operatorCode,
  cdAnvisa: product.anvisaCode,
  cdANP: product.anpCode,
  codigoRegistroMS: product.msRecordCode,
  nrQtdminima: product.minQuantity,
  nrQtdmaxima: product.maxQuantity,
  nrQtdVendCupon: product.cupomQuantity,
  nrQtdPromocao: product.promotionQuantity,
  nrDiasValidade: product.validityDaysQuantity,
  nrMargem: product.marginValue,
  nrMargem_A_Antes: product.beforeMarginAValue,
  nrMargem_V_Antes: product.beforeMarginVValue,
  nrMargemAtacado: product.wholesaleMarginValue,
  Margteorica: product.theoreticalMarginValue,
  nrPeso: product.weightValue,
  nrCustoAquisicao: product.acquisitionCostValue,
  vlCustoMedio: product.averageCostValue,
  vlCustoAvulso: product.singleCostValue,
  NrCustoFixo: product.fixedCostValue,
  nrCustofinal_a: product.finalCostAValue,
  nrCustofinal_v: product.finalCostVValue,
  nrCustoFinal_A_Antes: product.beforeFinalCostAValue,
  nrCustoFinal_V_Antes: product.beforeFinalCostVValue,
  nrPesoBruto: product.grossWeightValue,
  nrIpi: product.ipiNumber,
  nrIcms: product.icmsNumber,
  nrIcmsSub: product.icmsSubNumber,
  nrFrete: product.shippingNumber,
  nrReducao: product.reductionNumber,
  NrOutrosImpostos: product.othersTaxesNumber,
  nrMarkup_A: product.markupANumber,
  nrMarkup_V: product.markupVNumber,
  nrMarkup_V_Antes: product.beforeMarkupANumber,
  nrMarkup_A_Antes: product.beforeMarkupVNumber,
  PVConcorrente1: product.concurrentOneNumber,
  PVConcorrente2: product.concurrentTwoNumber,
  nrRedIcmsCompra: product.icmsYieldNumber,
  dsEmbalagem: product.packingDescription,
  dsReferencia: product.referenceDescription,
  dsPisCofins: product.pisCofinsDescription,
  dsMercosul: product.mercosurDescription,
  dsEspecificacao: product.specificationDescription,
  dsProdutoNota: product.productNoteDescription,
  dsPromocao: product.promotionDescription,
  dsPromocaoVarejo: product.retailPromotionDescription,
  dsIPPT: product.ipptDescription,
  dsStIPI: product.ipiSituationDescription,
  dsCFOPD: product.cfopDDescription,
  dsCFOPF: product.cfopFDescription,
  dsCFOPEntD: product.cfopEntDDescription,
  dsCFOPEntF: product.cfopEntFDescription,
  dsICMSCombatePobreza: product.isIcmsFightPoverty,
  PesoVariado: product.isAssortedWeight,
  naoCreditarIcmsCompra: product.noCreditIcmsPurchase,
  impressoraComanda: product.commandPrinter,
  MVAST: product.mvast,
  MVASTRET: product.mvastret,
  FLAGMVAST: product.mvastFlag,
  DISTRED: product.distred,
  nmproduto: product.name,
  TP_PROD: product.type,
  dsTIPO_ITEM: product.itemType,
  tipoComposicao: product.compositionType,
  IND_MED: product.indMed,
  cEAN: product.cean,
  dsUnidade: product.unit,
  dsOcultarLote: product.hideBatch,
  vlCompra: product.purchasePrice,
  Fator_Compra: product.purchaseFactor,
  PrecoMaxConsumidor: product.maxConsumerPrice,
  vlCompra_Antes: product.beforePurchasePrice,
  dtCompra: product.purchaseDate,
  dtCadastro: product.createdDate,
  nrQtdreal: product.realQuantity,
  nrQtdcontab: product.accountingQuantity,
  nrQtdAtacarejo: product.wholesaleRetailQuantity,
  vlPreco: product.price,
  vlPrecoNovo: product.newPrice,
  vlAtacado: product.wholesaleValue,
  vlAtacadoNovo: product.newWholesaleValue,
  dsPrateleira: product.shelfDescription,
  dsAtivo: product.activeDescription,
  dsSituacaoTributaria: product.taxSituationDescription,
  dsCodtributacao: product.taxationCode,
  excluirProdutoFidelidade: product.deleteProductLoyalty,
  AtivoApp: product.isActive,
  dtAlteracao: product.updateDate
});
