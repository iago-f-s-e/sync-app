import { ProductClient, ProductEntity } from '../dtos/product';

type ToEntity = (product: ProductClient) => ProductEntity;

export const productToEntity: ToEntity = product => ({
  id: product.cdProduto,
  groupId: product.cdgrupo,
  subGroupId: product.cdSubGrupo,
  personId: product.cdPessoa,
  personOneId: product.cdPessoa_1,
  taxClassificationId: product.cdClassificacaoFiscal,
  onlineOrderId: product.codPedidoOnline,
  manufacturerCode: product.cdFabricante,
  dicCode: product.cdCodigoDIC,
  geapCode: product.cdGEAP,
  unimedCode: product.cdUnimed,
  saoLucasCode: product.cdSaoLucas,
  susCode: product.cdSUS,
  simproCode: product.cdSIMPRO,
  pathCode: product.cdCaminho,
  ipiCode: product.cdIPI,
  operatorCode: product.cdOperador,
  anvisaCode: product.cdAnvisa,
  anpCode: product.cdANP,
  msRecordCode: product.codigoRegistroMS,
  minQuantity: product.nrQtdminima,
  maxQuantity: product.nrQtdmaxima,
  cupomQuantity: product.nrQtdVendCupon,
  promotionQuantity: product.nrQtdPromocao,
  validityDaysQuantity: product.nrDiasValidade,
  marginValue: product.nrMargem,
  beforeMarginAValue: product.nrMargem_A_Antes,
  beforeMarginVValue: product.nrMargem_V_Antes,
  wholesaleMarginValue: product.nrMargemAtacado,
  theoreticalMarginValue: product.Margteorica,
  weightValue: product.nrPeso,
  acquisitionCostValue: product.nrCustoAquisicao,
  averageCostValue: product.vlCustoMedio,
  singleCostValue: product.vlCustoAvulso,
  fixedCostValue: product.NrCustoFixo,
  finalCostAValue: product.nrCustoFinal_a,
  finalCostVValue: product.nrCustoFinal_v,
  beforeFinalCostAValue: product.nrCustoFinal_A_Antes,
  beforeFinalCostVValue: product.nrCustoFinal_V_Antes,
  grossWeightValue: product.nrPesoBruto,
  ipiNumber: product.nrIpi,
  icmsNumber: product.nrIcms,
  icmsSubNumber: product.nrIcmsSub,
  shippingNumber: product.nrFrete,
  reductionNumber: product.nrReducao,
  othersTaxesNumber: product.NrOutrosImpostos,
  markupANumber: product.nrMarkup_A,
  markupVNumber: product.nrMarkup_V,
  beforeMarkupANumber: product.nrMarkup_A_ANTES,
  beforeMarkupVNumber: product.nrMarkup_V_ANTES,
  concurrentOneNumber: product.PVConcorrente_1,
  concurrentTwoNumber: product.PVConcorrente_2,
  icmsYieldNumber: product.nrRedIcmsCompra,
  packingDescription: product.dsEmbalagem,
  referenceDescription: product.dsReferencia,
  pisCofinsDescription: product.dsPisCofins,
  mercosurDescription: product.dsMercosul,
  specificationDescription: product.dsEspecificacao,
  productNoteDescription: product.dsProdutoNota,
  promotionDescription: product.dsPromocao,
  retailPromotionDescription: product.dsPromocaoVarejo,
  ipptDescription: product.dsIPPT,
  ipiSituationDescription: product.dsStIPI,
  cfopDDescription: product.dsCFOPD,
  cfopFDescription: product.dsCFOPF,
  cfopEntDDescription: product.dsCFOPEntD,
  cfopEntFDescription: product.dsCFOPEntF,
  isIcmsFightPoverty: product.dsICMSCombatePobreza,
  isAssortedWeight: product.PesoVariado,
  noCreditIcmsPurchase: product.naoCreditarIcmsCompra,
  commandPrinter: product.impressoraComanda,
  mvast: product.MVAST,
  mvastret: product.MVASTRET,
  mvastFlag: product.FLAGMVAST,
  distred: product.DISTRED,
  name: product.nmproduto,
  type: product.TP_PROD,
  itemType: product.dsTIPO_ITEM,
  compositionType: product.tipoComposicao,
  indMed: product.IND_MED,
  cean: product.cEAN,
  unit: product.dsUnidade,
  hideBatch: product.dsOcultarLote,
  purchasePrice: product.vlCompra,
  purchaseFactor: product.Fator_Compra,
  maxConsumerPrice: product.PrecoMaxConsumidor,
  beforePurchasePrice: product.vlCompra_Antes,
  purchaseDate: product.dtCompra,
  createdDate: product.dtCadastro,
  realQuantity: product.nrQtdreal,
  accountingQuantity: product.nrQtdcontab,
  wholesaleRetailQuantity: product.nrQtdAtacarejo,
  price: product.vlPreco,
  newPrice: product.vlPrecoNovo,
  wholesaleValue: product.vlAtacado,
  newWholesaleValue: product.vlAtacadoNovo,
  shelfDescription: product.dsPrateleira,
  activeDescription: product.dsAtivo,
  taxSituationDescription: product.dsSituacaoTributaria,
  taxationCode: product.dsCodtributacao,
  deleteProductLoyalty: product.excluirProdutoFidelidade,
  isActive: product.AtivoApp,
  updateDate: product.dtAlteracao
});
